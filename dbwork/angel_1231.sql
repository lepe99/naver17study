-- 시퀀스를 생성하여 보자
CREATE SEQUENCE SEQ1; -- 1부터 1씩 증가하는 시퀀스 객체 생성
CREATE SEQUENCE SEQ2 START WITH 1 INCREMENT BY 1; -- 위와 동일
CREATE SEQUENCE SEQ3 START WITH 1 INCREMENT BY 1 NOCACHE; -- 위와 같으나 캐시 사이즈를 20에서 0으로 변경
CREATE SEQUENCE SEQ4 START WITH 1 INCREMENT BY 1 MAXVALUE 100 NOCACHE; -- 시퀀스의 최대 사이즈 100 제한
CREATE SEQUENCE SEQ5 START WITH 5 INCREMENT BY 5 NOCACHE; -- 5의 배수로 증가

-- 시퀀스 전체 정보를 출력
SELECT * FROM SEQ;

-- 시퀀스값 발생
SELECT SEQ1.NEXTVAL, SEQ2.NEXTVAL, SEQ3.NEXTVAL, SEQ4.NEXTVAL, SEQ5.NEXTVAL FROM DUAL;

-- 시퀀스 제거
DROP SEQUENCE SEQ1;
DROP SEQUENCE SEQ2;
DROP SEQUENCE SEQ3;
DROP SEQUENCE SEQ4;
DROP SEQUENCE SEQ5;

-- 테이블 생성
CREATE TABLE TEST1 (
    NUM NUMBER(3) PRIMARY KEY, 
    NAME VARCHAR2(20) NOT NULL,
    TODAY DATE);
    
-- 구조 확인
DESC TEST1;

-- 데이터 추가
INSERT INTO TEST1 VALUES (1, 'CANDY', SYSDATE); -- 필드 명 생략 시 모든 필드 순서대로 값을 입력한다

-- PRIMARY KEY 에 같은 값을 넣었을 경우 어떤 오류가 나오는지 확인하기
INSERT INTO TEST1 VALUES (1, 'MINA', SYSDATE); -- 무결성 제약 조건 위배
-- 이을 뺴고 삽입 시도
INSERT INTO TEST1 (NUM, TODAY) VALUES (2, SYSDATE); -- NAME이 null 인 레코드 만들 수 없어서 오류
-- 전체 데이터를 넣지만, 순서를 다르게
INSERT INTO TEST1 (NUM, TODAY, NAME) VALUES (2, SYSDATE, 'MINA'); -- 정상 실행

-- INSERT 를 2개 추가 한 상태에서 ROLLBACK
ROLLBACK; // 마지막 COMMIT 의 상태로 롤백

-- 다시 위 INSERT 문 실행하여 입력 후 COMMIT 하기
COMMIT;

-- 데이터 확인
SELECT * FROM TEST1;

-- TEST2 생성 (TEST1 과 같으나, 제약 조건 이름 추가)
CREATE TABLE TEST2 (
    NUM NUMBER(3) CONSTRAINT PK_TEST2_NUM PRIMARY KEY, -- CONSTRAINT 제약조건 으로 제약조건 정의
    NAME VARCHAR2(20) CONSTRAINT NN_TEST2_NAME NOT NULL,
    TODAY DATE);

-- 오류 발생 시켜보기
INSERT INTO TEST2 VALUES (1, '이영자', SYSDATE); -- 추가 완료
INSERT INTO TEST2 VALUES (1, '김성태', SYSDATE);

SELECT * FROM TEST2;

-- 테이블의 구조 변경, ALTER TABLE
-- 필드 추가 ADD, 필드 삭제 DROP COLUMN, 필드 수정 MODIFY, 필드명 변경 : RENAME

-- TEST1 에 AGE NUMBER(3) 필드 추가
ALTER TABLE TEST1 ADD AGE NUMBER(3);

-- TEST1 에 ADDR VARCHAR2(30) 필드 추가, 기본값 SEOUL
ALTER TABLE TEST1 ADD ADDR VARCHAR2(30) DEFAULT 'SEOUL'; -- 기본값 제약조건 추가

-- TEST1 에 RESIDAY DATE 필드 추가, 기본값 현재 날짜
ALTER TABLE TEST1 ADD RESIDAY DATE DEFAULT SYSDATE;

-- TEST1 의 TODAY 컬럼 삭제
ALTER TABLE TEST1 DROP COLUMN TODAY;

-- TEST1 의 NAME의 길이를 20에서 30으로 수정
ALTER TABLE TEST1 MODIFY NAME VARCHAR2(30);

-- TEST1 의 ADDR을 ADDRESS 로 필드명 변경
ALTER TABLE TEST1 RENAME COLUMN ADDR TO ADDRESS;

-- TEST1 의 RESIDAY를 WRITEDAY로 필드명 변경
ALTER TABLE TEST1 RENAME COLUMN RESIDAY TO WRITEDAY;

-- TEST1 의 제약조건 중 SYS_C008317 (임시이름) 을 제거하여보자
ALTER TABLE TEST1 DROP CONSTRAINT SYS_C008317;

-- TEST1 에 제약조건 추가 : AGE의 범위를 10~30으로, 제약조건명 CK_TEST1_AGE
ALTER TABLE TEST1 ADD CONSTRAINT CK_TEST1_AGE CHECK(AGE BETWEEN 10 AND 30);

-- AGE 에 범위를 벗어난 값을 추가하여 오류 확인
INSERT INTO TEST1 (NUM, NAME, AGE) VALUES (3, 'SON', 34); -- 나이가 30 이상이라 제약조건 위배

-- EX1) TEST2 에 BLOOD VARCHAR2(10), 초기값은 A로 추가
ALTER TABLE TEST2 ADD BLOOD VARCHAR2(10) DEFAULT('A');
-- EX2) TEST2 에서 TODAY 필드 제거하기
ALTER TABLE TEST2 DROP COLUMN TODAY;
-- EX3) TEST2 의 NAME을 EMP_NAME으로 필드명 변경
ALTER TABLE TEST2 RENAME COLUMN NAME TO EMP_NAME;
-- EX4) BLOOD 에 제약조건 추가 (A, B, O, AB 만 가능) 
ALTER TABLE TEST2 ADD CONSTRAINT CK_TEST2_BLOOD CHECK(BLOOD IN('A', 'B', 'O', 'AB'));
-- EX5) NN_TEST2_NAME 제약조건을 제거하기
ALTER TABLE TEST2 DROP CONSTRAINT NN_TEST2_NAME;

-- 연습용 테이블 제거하기
DROP TABLE TEST1;
DROP TABLE TEST2;


-------------------------------------------------------------------


-- 시퀀스 생성
CREATE SEQUENCE SEQ1 NOCACHE; -- 1부터 1씩 증가, 캐시 없는 시퀀스 생성

-- 테이블 생성
CREATE TABLE EMP (
    NUM NUMBER(3) CONSTRAINT PK_SAWON_NUM PRIMARY KEY,
    NAME VARCHAR2(20),
    DEPT VARCHAR2(20),
    GENDER VARCHAR2(10) DEFAULT '남자',
    AGE NUMBER(3),
    HEIGHT NUMBER(5, 1),
    WRITEDAY DATE);
    
-- 제약조건 추가 : 부서명(DEPT)은 홍보부, 교육부, 관리부 만 가능 / 성별은 남자, 여자만 가능
ALTER TABLE EMP ADD CONSTRAINT CK_EMP_DEPT CHECK(DEPT IN ('홍보부', '교육부', '관리부'));
ALTER TABLE EMP ADD CONSTRAINT CK_EMP_GENDER CHECK(GENDER IN ('남자', '여자'));

-- 데이터 추가
INSERT INTO EMP VALUES (SEQ1.NEXTVAL, '이진', '홍보부', '여자', 29, 176.8, SYSDATE);
INSERT INTO EMP (NUM, NAME, DEPT, AGE) VALUES (SEQ1.NEXTVAL, '강호동', '관리부', 35);
INSERT INTO EMP (NUM, NAME, DEPT, HEIGHT) VALUES (SEQ1.NEXTVAL, '유재석', '홍보부', 178.5);
INSERT INTO EMP VALUES (SEQ1.NEXTVAL, '송해나', '홍보부', '여자', 31, 158.9, SYSDATE);
INSERT INTO EMP (NUM, NAME, DEPT, GENDER, AGE, WRITEDAY) VALUES (SEQ1.NEXTVAL, '이영자', '교육부', '여자', 42, SYSDATE);
COMMIT;

-- 수정
UPDATE EMP SET HEIGHT = 186.5; -- 만약 WHERE 조건을 쓰지 않는다면 HEIGHT 필드의 모든 데이터가 수정된다
-- 다시 취소
ROLLBACK;

-- NUM = 3인 경우만 수정
UPDATE EMP SET HEIGHT = 186.5 WHERE NUM = 2;

-- 여러 필드를 수정하는 경우
UPDATE EMP SET DEPT = '홍보부', AGE = 39, HEIGHT = 162.1 WHERE NAME = '이영자';

-- WRITEDAY 가 NULL 일 경우 '2024-12-12' 로 변경 해보자
UPDATE EMP SET WRITEDAY = '2024-12-12' WHERE WRITEDAY IS NULL;

COMMIT;

DELETE FROM EMP; -- WHERE을 사용하지 않으면 전체 레코드 삭제
ROLLBACK;

-- AGE 가 NULL 인 데이터는 모두 삭제
DELETE FROM EMP WHERE AGE IS NULL;

-- GROUP BY 연습
-- 부서별 인원수와 평균 나이를 구하시오
SELECT DEPT, COUNT(*) 인원수, ROUND(AVG(AGE), 0) 나이 FROM EMP GROUP BY DEPT;
-- 성별 인원수와 평균 나이
SELECT GENDER, COUNT(*) 인원수, ROUND(AVG(AGE), 0) 나이 FROM EMP GROUP BY GENDER;




-----------------------------------------------------------------





-- JOIN 연습용 테이블 생성하기
CREATE TABLE FOOD (
    FOODNUM NUMBER(3) PRIMARY KEY,
    FOODNAME VARCHAR2(20),
    FOODPRICE NUMBER(7),
    FOODSIZE VARCHAR2(20));
    
CREATE TABLE BOOKING (
    BNUM NUMBER(3) CONSTRAINT PK_BOOKING_BNUM PRIMARY KEY,
    BNAME VARCHAR2(20) CONSTRAINT NN_BOOKING_BNAME NOT NULL,
    BHP VARCHAR2(20) CONSTRAINT UQ_BOOKING_BHP UNIQUE,
    FOODNUM NUMBER(3),
    BOOKINGDAY DATE,
    CONSTRAINT FK_FOODNUM FOREIGN KEY(FOODNUM) REFERENCES FOOD(FOODNUM));
    
-- 메뉴 등록
INSERT INTO FOOD VALUES (100, '짜장면', 9000, '보통');
INSERT INTO FOOD VALUES (101, '짜장면', 9000, '곱빼기');
INSERT INTO FOOD VALUES (200, '탕수육', 9000, '보통');
INSERT INTO FOOD VALUES (201, '탕수육', 9000, '곱빼기');
INSERT INTO FOOD VALUES (300, '칠리새우', 9000, '소');
INSERT INTO FOOD VALUES (301, '칠리새우', 9000, '대');
INSERT INTO FOOD VALUES (400, '해물짬뽕', 9000, '보통');
COMMIT;
SELECT * FROM FOOD;

-- 시퀀스 생성
CREATE SEQUENCE SEQ_FOOD START WITH 10 INCREMENT BY 10 NOCACHE;

-- 예약
INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL, '이영자', '010-1234-5678', '200', '2024-12-24');
-- 오류 발생 시켜보기
INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL, '김말자', '010-7777-5678', '401', '2025-01-10'); -- 401은 메뉴에 없음
-- 무결성 제약조건(ANGEL.FK_FOODNUM)이 위배되었습니다- 부모 키가 없습니다
INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL, '김말자', '010-7777-5678', '301', '2025-01-10');
INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL, '이효리', '010-3074-5678', '400', '2025-02-10');
INSERT INTO BOOKING VALUES (SEQ_FOOD.NEXTVAL, '손예진', '010-0834-5678', '201', '2024-12-31');
COMMIT;

-- INNER JOIN 으로 예약손님의 주문정보를 확인하자
SELECT BNAME, BHP, FOODNAME, FOODPRICE, FOODSIZE, TO_CHAR(BOOKINGDAY, 'YYYY-MM-DD') BOOKINGDAY
FROM FOOD F, BOOKING B
WHERE F.FOODNUM = B.FOODNUM;

-- OUTER JOIN 을 이용하여 한번도 주문하지 않은 메뉴들을 알아보자
SELECT F.FOODNUM, BNAME, FOODNAME, FOODPRICE, FOODSIZE
FROM FOOD F, BOOKING B
WHERE F.FOODNUM = B.FOODNUM(+); -- 아무도 주문하지 않은 메뉴는 주문자가 null로 표시된다

-- 위 SQL문을 이용해 주문자 이름을 빼고 NULL 인 경우만 출력하면, 아무도 주문하지 않은 메뉴만 골라낼 수 있다
SELECT F.FOODNUM,FOODNAME,FOODPRICE,FOODSIZE
FROM FOOD F,BOOKING B
WHERE F.FOODNUM=B.FOODNUM(+) AND BNAME IS NULL;

-- BOOKING(자식테이블) 에 추가된 메뉴를 FOOD(부모테이블) 에서 삭제할 수 있을까?
-- 자식 테이블 생성시 ON DELETE CASCADE 설정을 하지 않았기 때문에 불가능
DELETE FROM FOOD WHERE FOODNUM=200; -- 200번 메뉴는 이영자가 예약주문. 삭제못함
-- 오류메세지 : 무결성 제약조건(ANGEL.FK_FOODNUM)이 위배되었습니다- 자식 레코드가 발견되었습니다

DELETE FROM FOOD WHERE FOODNUM=300; -- 아무도 주문을 예약하지 않음. 삭제가능

-- 부모 테이블을 삭제해보자
DROP TABLE FOOD; -- 삭제 안됨, 자식 테이블을 먼저 삭제해야 부모 테이블도 삭제 가능

-- 모든 테이블 삭제 / 하위 테이블 부터
DROP TABLE BOOKING;
DROP TABLE FOOD;
DROP TABLE EMP;
DROP TABLE TEST1;
DROP TABLE TEST2;
DROP SEQUENCE SEQ1;
DROP SEQUENCE SEQ_FOOD;

COMMIT;